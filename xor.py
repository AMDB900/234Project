from padding import *
from byte_frequency_analysis import *
from HuffmanEncoding import *

"""def xor_string_with_array(text, key):
    if len(text) != len(key):
        return None
    
    result = ''
    for i in range(len(text)):
        result += chr(ord(text[i]) ^ key[i % len(key)])
    return result"""

def xor(text, key):
    # if text != 16MB: error
    offset = 1024 # Key size, set to 1KB
    if len(key) != offset:
        print(f"Error: Key size is {len(key)}B. Key must be {offset}B in size.")
        exit()
    i = 0
    result = b''
    while i < len(text):
        result += bytes(a ^ b for a, b in zip(text[i:i + offset], key))
        i += offset
    return result

if __name__ == "__main__":
    ## xor functionality testing
    # Padded key 
    pi_digits = read_pi_digits('pi_10000_digits.txt')  # Load the pi digits from a file
    key = "my secret key"  # Example key
    padded_key = pad_key_with_pi(key, pi_digits)
    print("Key: " + padded_key.hex())
    print("Length: " +  str(len(padded_key)))  # Should print 1024 if the padding is correct
    
    text = b"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. His many legs, pitifully thin compared with the size of the rest of him, waved about helplessly as he looked. \"What's happened to me?\" he thought. It wasn't a dream. His room, a proper human room although a little too small, lay peacefully between its four familiar walls. A collection of textile samples lay spread out on the table - Samsa was a travelling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. Gregor then t"
    print(f"Text: {text}")
    print("Length: " +  str(len(text)))
    encrypted_text = xor(text, padded_key)
    print(f"Encrypted: {encrypted_text}")
    decrypted_text = xor(encrypted_text, padded_key)
    print(f"Decrypted: {decrypted_text}\n")
    
    text = b"\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x01"
    print(f"Text: {text}")
    print("Length: " +  str(len(text)))
    encrypted_text = xor(text, padded_key)
    print(f"Encrypted: {encrypted_text}")
    decrypted_text = xor(encrypted_text, padded_key)
    print(f"Decrypted: {decrypted_text}\n\n")
    
    # Loaded key 
    file_key = load_and_pad_key_from_file('Screenshot 2025-02-20 160715.png', pi_digits)
    print("Key: " + file_key.hex())
    print("Length: " +  str(len(file_key)))  # Should print 1024 if the padding is correct

    text = b"One morning, when Gregor Samsa woke from troubled dreams, he found himself transformed in his bed into a horrible vermin. He lay on his armour-like back, and if he lifted his head a little he could see his brown belly, slightly domed and divided by arches into stiff sections. The bedding was hardly able to cover it and seemed ready to slide off any moment. His many legs, pitifully thin compared with the size of the rest of him, waved about helplessly as he looked. \"What's happened to me?\" he thought. It wasn't a dream. His room, a proper human room although a little too small, lay peacefully between its four familiar walls. A collection of textile samples lay spread out on the table - Samsa was a travelling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame. It showed a lady fitted out with a fur hat and fur boa who sat upright, raising a heavy fur muff that covered the whole of her lower arm towards the viewer. Gregor then t"
    print(f"Text: {text}")
    print("Length: " +  str(len(text)))
    encrypted_text = xor(text, file_key)
    print(f"Encrypted: {encrypted_text}")
    decrypted_text = xor(encrypted_text, file_key)
    print(f"Decrypted: {decrypted_text}\n")
    
    text = b"\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x20\x74\x75\x76\x20\x77\x78\x79\x7a\x20\x41\x42\x43\x20\x44\x45\x46\x20\x47\x48\x49\x20\x4a\x4b\x4c\x20\x4d\x4e\x4f\x20\x50\x51\x52\x53\x20\x54\x55\x56\x20\x57\x58\x59\x5a\x20\x21\x22\xa7\x20\x24\x25\x26\x20\x2f\x28\x29\x20\x3d\x3f\x2a\x20\x27\x3c\x3e\x20\x23\x7c\x3b\x20\xb2\xb3\x7e\x20\x40\x60\xb4\x20\xa9\xab\xbb\x20\xa4\xbc\xd7\x20\x7b\x7d\x20\x61\x62\x63\x20\x64\x65\x66\x20\x67\x68\x69\x20\x6a\x6b\x6c\x20\x6d\x6e\x6f\x20\x70\x71\x72\x73\x01"
    print(f"Text: {text}")
    print("Length: " +  str(len(text)))
    encrypted_text = xor(text, file_key)
    print(f"Encrypted: {encrypted_text}")
    decrypted_text = xor(encrypted_text, file_key)
    print(f"Decrypted: {decrypted_text}\n")
    
    
    ## Real Test Input (2 = 2MB random numbers)
    f = open("test_input/2", "rb")
    file = f.read()
    print(f"File: {len(file)}B: {file}")

    encrypted_text = xor(file, padded_key)  # Using a padded key from padding.py, we assume it will work for a loaded one too
    print(f"Encrypted {len(encrypted_text)}: {encrypted_text}")
    decrypted_text = xor(encrypted_text, padded_key)
    print(f"Decrypted {len(decrypted_text)}: {decrypted_text}\n")
    
    
    ## Trying with huffman
    print("Select a file to encrypt:")
    data = get_file()
    key = padded_key # Using a padded key

    string_data = data.decode('utf-8', errors='ignore')
    
    # XOR the key against the file in 1KB chunks
    encrypted = xor(data, key)
    # Perform Huffman encoding of resulting array
    encoded_data, tree = huffman_encode(encrypted)
    
    with open("text.khn", "w") as file:
        file.write(encoded_data)

    print(f"Original {len(data)}B:", data)
    print("Original length:", len(string_to_binary(string_data)))

    print("Encoded length:", len(encoded_data))
    print("Encoded:", encoded_data)

    # Perform Huffman decoding 
    decoded_data = huffman_decode(encoded_data, tree)
    # XOR the decoded data against the file
    decrypted = xor(decoded_data, key)
    print(f"Decoded {len(decoded_data)}B: ", decrypted)
